#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/bt.h>
#include <input/processors.dtsi>
#include <physical_layouts.dtsi>

/ {
    chosen {
        zmk,physical-layout = &default_layout;
    };

    // キーマトリックス設定
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <11>;
        rows = <4>;               
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)                     RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)                     RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(3,4)     RC(3,6) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
            RC(3,0) RC(3,1)                 RC(3,2) RC(3,3)     RC(3,7) RC(3,8)                 RC(3,9) RC(3,10)
        >;
    };

    default_layout: default_layout {
        compatible = "zmk,physical-layout";
        display-name = "Default";
        kscan = <&kscan0>;
        transform = <&default_transform>;

        keys  //                     w   h    x    y     rot    rx    ry
            = <&key_physical_attrs 100 100    0    0       0     0     0>
            , <&key_physical_attrs 100 100  100    0       0     0     0>
            , <&key_physical_attrs 100 100  200    0       0     0     0>
            , <&key_physical_attrs 100 100  300    0       0     0     0>
            , <&key_physical_attrs 100 100  400    0       0     0     0>
            , <&key_physical_attrs 100 100  800    0       0     0     0>
            , <&key_physical_attrs 100 100  900    0       0     0     0>
            , <&key_physical_attrs 100 100 1000    0       0     0     0>
            , <&key_physical_attrs 100 100 1100    0       0     0     0>
            , <&key_physical_attrs 100 100 1200    0       0     0     0>
            , <&key_physical_attrs 100 100    0  100       0     0     0>
            , <&key_physical_attrs 100 100  100  100       0     0     0>
            , <&key_physical_attrs 100 100  200  100       0     0     0>
            , <&key_physical_attrs 100 100  300  100       0     0     0>
            , <&key_physical_attrs 100 100  400  100       0     0     0>
            , <&key_physical_attrs 100 100  800  100       0     0     0>
            , <&key_physical_attrs 100 100  900  100       0     0     0>
            , <&key_physical_attrs 100 100 1000  100       0     0     0>
            , <&key_physical_attrs 100 100 1100  100       0     0     0>
            , <&key_physical_attrs 100 100 1200  100       0     0     0>
            , <&key_physical_attrs 100 100    0  200       0     0     0>
            , <&key_physical_attrs 100 100  100  200       0     0     0>
            , <&key_physical_attrs 100 100  200  200       0     0     0>
            , <&key_physical_attrs 100 100  300  200       0     0     0>
            , <&key_physical_attrs 100 100  400  200       0     0     0>
            , <&key_physical_attrs 100 100  500  200       0     0     0>
            , <&key_physical_attrs 100 100  700  200       0     0     0>
            , <&key_physical_attrs 100 100  800  200       0     0     0>
            , <&key_physical_attrs 100 100  900  200       0     0     0>
            , <&key_physical_attrs 100 100 1000  200       0     0     0>
            , <&key_physical_attrs 100 100 1100  200       0     0     0>
            , <&key_physical_attrs 100 100 1200  200       0     0     0>
            , <&key_physical_attrs 100 100    0  300       0     0     0>
            , <&key_physical_attrs 100 100  100  300       0     0     0>
            , <&key_physical_attrs 100 100  400  300       0     0     0>
            , <&key_physical_attrs 100 100  500  300       0     0     0>
            , <&key_physical_attrs 100 100  700  300       0     0     0>
            , <&key_physical_attrs 100 100  800  300       0     0     0>
            , <&key_physical_attrs 100 100 1100  300       0     0     0>
            , <&key_physical_attrs 100 100 1200  300       0     0     0>
            ;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";
        row-gpios
            = <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> 
            , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> 
            , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> 
            , <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> 			
            ;
    };

    // 共通のトラックボール設定
    trackball: trackball@0 {
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <800>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        force-awake;
    };

    // 共通のトラックパッド設定
    glidepoint: glidepoint@2a {
        compatible = "cirque,pinnacle";
        reg = <0x2a>;
        /* Optional: data ready pin if wired */
        /* dr-gpios = <&gpio1 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; */
    };

    // 入力処理の設定
    split_inputs {
        #address-cells = <1>;
        #size-cells = <1>;

        // 左側からのトラックボール入力をスクロールとして処理
        trackball_split: trackball_split@0 {
            compatible = "zmk,input-split";
            reg = <0 0>;
        };

        // 右側のトラックパッド入力をカーソル移動として処理
        glidepoint_split: glidepoint_split@1 {
            compatible = "zmk,input-split";
            reg = <1 0>;
        };
    };

    // トラックボール用のスクロールリスナー（左側基本動作）
    trackball_listener: trackball_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&trackball_split>;
        scroll {
            layers = <0>;  // レイヤー0でスクロール
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>, 
                               <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>, 
                               <&zip_xy_scaler 1 16>, 
                               <&zip_xy_to_scroll_mapper>;
        };
    };

    // トラックボール用のポインターリスナー（左側の代替動作）
    trackball_pointer_listener: trackball_pointer_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&trackball_split>;
        pointer {
            layers = <1>;  // レイヤー1でカーソル移動
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>,
                               <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>,
                               <&zip_xy_scaler 1 8>;
        };
    };

    // トラックパッド用のポインターリスナー（右側基本動作）
    glidepoint_pointer_listener: glidepoint_pointer_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint_split>;
        pointer {
            layers = <0>;  // レイヤー0でカーソル移動
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>,
                               <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>,
                               <&zip_xy_scaler 1 12>;
        };
    };

    // トラックパッド用のスクロールリスナー（右側の代替動作）
    glidepoint_scroll_listener: glidepoint_scroll_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint_split>;
        scroll {
            layers = <1>;  // レイヤー1でスクロール
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>,
                               <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>,
                               <&zip_xy_scaler 1 20>, 
                               <&zip_xy_to_scroll_mapper>;
        };
    };
};
